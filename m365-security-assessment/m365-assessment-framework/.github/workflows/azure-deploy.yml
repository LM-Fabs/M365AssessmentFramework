name: Deploy M365 Assessment Framework to Azure (DISABLED)

# Disabled this workflow since we're using the auto-generated Azure Static Web Apps workflow
# The auto-generated workflow handles both frontend and API deployment properly

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (use with caution)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
  AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            api/package-lock.json
            
      - name: Install Azure Developer CLI
        uses: Azure/setup-azd@v1.0.0
        
      - name: Log in with Azure (Federated Credentials)
        if: ${{ env.AZURE_CLIENT_ID != '' }}
        run: |
          azd auth login \
            --client-id "${{ env.AZURE_CLIENT_ID }}" \
            --federated-credential-provider "github" \
            --tenant-id "${{ env.AZURE_TENANT_ID }}"
            
      - name: Log in with Azure (Service Principal)
        if: ${{ env.AZURE_CLIENT_ID == '' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Restore azd environment
        working-directory: ./m365-security-assessment/m365-assessment-framework
        run: |
          azd env set AZURE_LOCATION ${{ env.AZURE_LOCATION }}
          azd env set AZURE_ENV_NAME ${{ env.AZURE_ENV_NAME }}
          azd env set AZURE_SUBSCRIPTION_ID ${{ env.AZURE_SUBSCRIPTION_ID }}
          azd env set AZURE_TENANT_ID ${{ env.AZURE_TENANT_ID }}
          azd env set AZURE_CLIENT_ID ${{ secrets.AZURE_CLIENT_ID || env.AZURE_CLIENT_ID }}
          azd env set AZURE_CLIENT_SECRET ${{ secrets.AZURE_CLIENT_SECRET }}
          
      - name: Install frontend dependencies
        working-directory: ./m365-security-assessment/m365-assessment-framework
        run: npm ci
        
      - name: Install API dependencies
        working-directory: ./m365-security-assessment/m365-assessment-framework/api
        run: npm ci
        
      - name: Build frontend
        working-directory: ./m365-security-assessment/m365-assessment-framework
        run: npm run build
        
      - name: Build API
        working-directory: ./m365-security-assessment/m365-assessment-framework/api
        run: npm run build --if-present
        
      - name: Provision Azure resources (infrastructure)
        working-directory: ./m365-security-assessment/m365-assessment-framework
        run: azd provision --no-prompt
        
      - name: Get Static Web App deployment token
        working-directory: ./m365-security-assessment/m365-assessment-framework
        id: get-token
        run: |
          # Get the Static Web App name and resource group from azd outputs
          STATIC_WEB_APP_NAME=$(azd env get-values | grep STATIC_WEB_APP_NAME | cut -d'=' -f2 | tr -d '"')
          RESOURCE_GROUP=$(azd env get-values | grep AZURE_RESOURCE_GROUP | cut -d'=' -f2 | tr -d '"')
          
          echo "Getting deployment token for Static Web App: $STATIC_WEB_APP_NAME"
          
          # Get the deployment token for the Static Web App
          DEPLOYMENT_TOKEN=$(az staticwebapp secrets list --name "$STATIC_WEB_APP_NAME" --resource-group "$RESOURCE_GROUP" --query "properties.apiKey" --output tsv)
          echo "deployment-token=$DEPLOYMENT_TOKEN" >> $GITHUB_OUTPUT
        
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.get-token.outputs.deployment-token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: '/m365-security-assessment/m365-assessment-framework'
          api_location: '/m365-security-assessment/m365-assessment-framework/api'
          output_location: 'build'
          app_build_command: 'npm run build'
          api_build_command: 'npm run build'
        
      - name: Configure Static Web App Environment Variables
        working-directory: ./m365-security-assessment/m365-assessment-framework
        run: |
          # Get the Static Web App name from azd outputs
          STATIC_WEB_APP_NAME=$(azd env get-values | grep STATIC_WEB_APP_NAME | cut -d'=' -f2 | tr -d '"')
          RESOURCE_GROUP=$(azd env get-values | grep AZURE_RESOURCE_GROUP | cut -d'=' -f2 | tr -d '"')
          
          echo "Configuring environment variables for Static Web App: $STATIC_WEB_APP_NAME"
          
          # Configure AZURE_CLIENT_ID and AZURE_CLIENT_SECRET in Static Web App
          # These are not set in Bicep to prevent secret exposure
          az staticwebapp appsettings set \
            --name "$STATIC_WEB_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --setting-names AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}" \
                           AZURE_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}"
        
      - name: Validate deployment
        working-directory: ./m365-security-assessment/m365-assessment-framework
        run: |
          echo "Deployment completed successfully!"
          azd show --output table
          
      - name: Check application logs
        if: failure()
        working-directory: ./m365-security-assessment/m365-assessment-framework
        run: azd logs --follow=false